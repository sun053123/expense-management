# Expense Management System - Tool Chain Guide

## Development Tools

### Required Software
- **Node.js**: v18.x or higher (LTS version recommended)
- **npm/yarn**: Latest version
- **MongoDB**: v5.x or higher (local or MongoDB Atlas)
- **Docker**: v20.x or higher
- **Git**: v2.x or higher
- **VS Code**: Recommended IDE with extensions

### VS Code Extensions
```json
{
  "recommendations": [
    "dbaeumer.vscode-eslint",
    "esbenp.prettier-vscode",
    "bradlc.vscode-tailwindcss",
    "dsznajder.es7-react-js-snippets",
    "mongodb.mongodb-vscode",
    "ms-azuretools.vscode-docker",
    "christian-kohler.npm-intellisense",
    "formulahendry.auto-rename-tag"
  ]
}
```

## Backend Development Tools

### Core Dependencies
```json
{
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.3.0",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.0",
    "dotenv": "^16.0.3",
    "cors": "^2.8.5",
    "express-validator": "^7.0.1",
    "helmet": "^7.0.0",
    "morgan": "^1.10.0",
    "compression": "^1.7.4"
  },
  "devDependencies": {
    "nodemon": "^2.0.22",
    "jest": "^29.5.0",
    "supertest": "^6.3.3",
    "eslint": "^8.42.0",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-plugin-import": "^2.27.5"
  }
}
```

### npm Scripts
```json
{
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest --coverage",
    "test:watch": "jest --watch",
    "lint": "eslint . --ext .js",
    "lint:fix": "eslint . --ext .js --fix",
    "seed": "node scripts/seed.js"
  }
}
```

## Frontend Development Tools

### Core Dependencies
```json
{
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.11.2",
    "axios": "^1.4.0",
    "chart.js": "^4.3.0",
    "react-chartjs-2": "^5.2.0",
    "date-fns": "^2.30.0",
    "react-hook-form": "^7.44.3",
    "react-hot-toast": "^2.4.1"
  },
  "devDependencies": {
    "@testing-library/react": "^14.0.0",
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/user-event": "^14.4.3",
    "tailwindcss": "^3.3.2",
    "autoprefixer": "^10.4.14",
    "postcss": "^8.4.24",
    "vite": "^4.3.9",
    "@vitejs/plugin-react": "^4.0.0"
  }
}
```

### Vite Configuration
```javascript
// vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://localhost:5000',
        changeOrigin: true
      }
    }
  },
  build: {
    outDir: 'build',
    sourcemap: true
  }
});
```

## Build and Bundle Tools

### Backend Build Process
```bash
# Development
npm run dev

# Production build
npm run build
docker build -t expense-backend ./backend

# Environment setup
cp .env.example .env
# Edit .env with your configuration
```

### Frontend Build Process
```bash
# Development
npm run dev

# Production build
npm run build
docker build -t expense-frontend ./frontend

# Analyze bundle size
npm run build -- --analyze
```

## Testing Tools

### Backend Testing Setup
```javascript
// jest.config.js
module.exports = {
  testEnvironment: 'node',
  coverageDirectory: 'coverage',
  collectCoverageFrom: [
    'src/**/*.js',
    '!src/server.js',
    '!src/config/*.js'
  ],
  testMatch: [
    '**/__tests__/**/*.test.js',
    '**/?(*.)+(spec|test).js'
  ],
  setupFilesAfterEnv: ['<rootDir>/tests/setup.js']
};
```

### Frontend Testing Setup
```javascript
// jest.config.js
module.exports = {
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/src/setupTests.js'],
  moduleNameMapper: {
    '\\.(css|less|scss|sass)$': 'identity-obj-proxy',
    '^@/(.*)$': '<rootDir>/src/$1'
  },
  transform: {
    '^.+\\.(js|jsx)$': 'babel-jest'
  }
};
```

### Testing Commands
```bash
# Run all tests
npm test

# Run tests in watch mode
npm run test:watch

# Run tests with coverage
npm run test:coverage

# Run specific test file
npm test -- TransactionForm.test.js

# E2E testing (if implemented)
npm run test:e2e
```

## Code Quality Tools

### ESLint Configuration
```javascript
// .eslintrc.js
module.exports = {
  env: {
    browser: true,
    es2021: true,
    node: true,
    jest: true
  },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react-hooks/recommended'
  ],
  parserOptions: {
    ecmaFeatures: {
      jsx: true
    },
    ecmaVersion: 12,
    sourceType: 'module'
  },
  rules: {
    'react/prop-types': 'off',
    'no-console': ['warn', { allow: ['warn', 'error'] }],
    'no-unused-vars': ['error', { argsIgnorePattern: '^_' }]
  }
};
```

### Prettier Configuration
```json
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false,
  "bracketSpacing": true,
  "jsxBracketSameLine": false,
  "arrowParens": "always"
}
```

## Docker Tools

### Docker Commands
```bash
# Build images
docker build -t expense-backend ./backend
docker build -t expense-frontend ./frontend

# Run containers
docker run -p 5000:5000 --env-file .env expense-backend
docker run -p 3000:3000 expense-frontend

# Docker Compose
docker-compose up -d
docker-compose down
docker-compose logs -f

# Clean up
docker system prune -a
```

### Docker Compose Development
```yaml
version: '3.8'

services:
  mongo:
    image: mongo:5
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password

  backend:
    build: ./backend
    ports:
      - "5000:5000"
    environment:
      - MONGODB_URI=mongodb://admin:password@mongo:27017/expense-tracker?authSource=admin
    depends_on:
      - mongo
    volumes:
      - ./backend:/app
      - /app/node_modules

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  mongo-data:
```

## AWS Deployment Tools

### AWS CLI Commands
```bash
# Configure AWS CLI
aws configure

# Create EC2 instance
aws ec2 run-instances \
  --image-id ami-0abcdef1234567890 \
  --instance-type t2.micro \
  --key-name expense-tracker-key \
  --security-group-ids sg-12345678 \
  --subnet-id subnet-12345678

# Copy files to EC2
scp -i expense-tracker-key.pem docker-compose.yml ec2-user@<instance-ip>:~/

# SSH into EC2
ssh -i expense-tracker-key.pem ec2-user@<instance-ip>
```

### EC2 Setup Script
```bash
#!/bin/bash
# setup-ec2.sh

# Update system
sudo yum update -y

# Install Docker
sudo yum install docker -y
sudo service docker start
sudo usermod -a -G docker ec2-user

# Install Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# Install Git
sudo yum install git -y

# Clone repository
git clone https://github.com/your-repo/expense-tracker.git
cd expense-tracker

# Start application
docker-compose up -d
```

## Monitoring Tools

### Application Monitoring
```javascript
// Morgan for HTTP logging
app.use(morgan('combined', {
  stream: {
    write: (message) => logger.info(message.trim())
  }
}));

// Custom metrics middleware
app.use((req, res, next) => {
  const start = Date.now();
  
  res.on('finish', () => {
    const duration = Date.now() - start;
    metrics.httpRequestDuration.observe({
      method: req.method,
      route: req.route?.path || 'unknown',
      status: res.statusCode
    }, duration);
  });
  
  next();
});
```

### Health Check Endpoints
```javascript
// Basic health check
app.get('/health', (req, res) => {
  res.json({ status: 'healthy', timestamp: new Date() });
});

// Detailed health check
app.get('/health/detailed', async (req, res) => {
  const checks = {
    database: 'unhealthy',
    memory: process.memoryUsage(),
    uptime: process.uptime()
  };
  
  try {
    await mongoose.connection.db.admin().ping();
    checks.database = 'healthy';
  } catch (error) {
    checks.database = error.message;
  }
  
  res.json(checks);
});
```

## Development Workflow

### Git Workflow
```bash
# Create feature branch
git checkout -b feature/add-expense-categories

# Make changes and commit
git add .
git commit -m "feat(transactions): add category field to transactions"

# Push changes
git push origin feature/add-expense-categories

# Create pull request
# Review and merge via GitLab/GitHub
```

### Pre-commit Hooks
```json
// package.json
{
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "lint-staged": {
    "*.js": ["eslint --fix", "prettier --write"],
    "*.jsx": ["eslint --fix", "prettier --write"],
    "*.json": ["prettier --write"]
  }
}
```

## Debugging Tools

### Backend Debugging
```javascript
// Launch configuration for VS Code
{
  "type": "node",
  "request": "launch",
  "name": "Debug Backend",
  "program": "${workspaceFolder}/backend/server.js",
  "envFile": "${workspaceFolder}/backend/.env",
  "console": "integratedTerminal"
}
```

### Frontend Debugging
```javascript
// Browser DevTools
// React Developer Tools
// Redux DevTools (if using Redux)

// Console debugging helpers
if (process.env.NODE_ENV === 'development') {
  window.debugAPI = {
    getToken: () => localStorage.getItem('token'),
    clearStorage: () => localStorage.clear(),
    logState: () => console.log(store.getState())
  };
}
```

## Performance Tools

### Backend Performance
```bash
# Load testing with Artillery
npm install -g artillery

# Create load test script
artillery quick --count 50 --num 10 http://localhost:5000/api/transactions

# Run detailed load test
artillery run load-test.yml
```

### Frontend Performance
```bash
# Lighthouse CI
npm install -g @lhci/cli

# Run Lighthouse
lhci autorun

# Bundle analysis
npm run build -- --analyze

# React Profiler
# Use React DevTools Profiler tab
```

## Summary

This comprehensive tool chain provides everything needed to develop, test, deploy, and maintain the Expense Management System efficiently. The tools are selected for their reliability, community support, and ease of use within the 6-hour development timeline.