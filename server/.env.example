# Expense Management Server Environment Configuration
# Copy this file to .env and update the values for your environment

# =================================================================
# SERVER CONFIGURATION
# =================================================================
NODE_ENV=development
PORT=8888

# =================================================================
# DATABASE CONFIGURATION
# =================================================================
# PostgreSQL connection string
# Local development:
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/expense_management?schema=public"

# Docker Compose (uncomment when using Docker):
# DATABASE_URL="postgresql://postgres:postgres@postgres:5432/expense_management?schema=public"

# =================================================================
# JWT CONFIGURATION
# =================================================================
# Secret key for JWT token signing (CHANGE THIS IN PRODUCTION!)
# Generate with: openssl rand -base64 32
JWT_SECRET="your-super-secret-jwt-key-change-this-in-production"

# JWT token expiration time (examples: 1h, 7d, 30d)
JWT_EXPIRES_IN="7d"

# =================================================================
# LOGGING CONFIGURATION
# =================================================================
# Log level: error, warn, info, debug
LOG_LEVEL="info"

# =================================================================
# CORS CONFIGURATION
# =================================================================
# Allowed origins for CORS
CORS_ORIGIN="http://localhost:5173"

# =================================================================
# RATE LIMITING CONFIGURATION
# =================================================================
# Rate limiting window in milliseconds (15 minutes = 900000ms)
RATE_LIMIT_WINDOW_MS=900000

# Maximum requests per window
RATE_LIMIT_MAX_REQUESTS=100

# Maximum authentication requests per window
AUTH_RATE_LIMIT_MAX_REQUESTS=10

# =================================================================
# DOCKER CONFIGURATION NOTES
# =================================================================
# When running with Docker Compose:
# 1. Update DATABASE_URL to use service name 'postgres' instead of 'localhost'
# 2. Ensure CORS_ORIGIN matches your frontend URL
# 3. For production, set NODE_ENV=production and use strong secrets

# =================================================================
# PRODUCTION SECURITY CHECKLIST
# =================================================================
# □ Generate strong JWT_SECRET: openssl rand -base64 32
# □ Use strong database password
# □ Set NODE_ENV=production
# □ Use HTTPS URLs for CORS_ORIGIN
# □ Enable SSL for database connections
# □ Use secrets management system